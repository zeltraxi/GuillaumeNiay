# -*- coding: utf-8 -*-
"""
Created on Fri Mar  8 06:00:28 2019

@author: Guillaume
"""
import random
import math
#miss: loop initialization
#do crossing gene
#if len mutacion change 0 to 1 and 1 to 0
#Input

n = int(input("Number of variable  :"))
listvar = []

#Initilization of cross
Elitismo = float(input("Number of percentage of elitism  :"))
Cross = float(input("Number of percentage of crossing  :"))
Mutacion1 = float(input("Number of percentage of mutacion 1  :"))
Mutacion2 = float(input("Number of percentage of mutacion 2  :"))
maxmin = input("Optimization (min/max) :")
dictgene=[]

#For 1 variable    
if n == 1:
    
    #input variable according to number of variable
    for i  in range(0,n):
        a = int(input("Minimum of your variable : "))
        listvar.append(a)
        b = int(input("Maximum of your variable : "))
        listvar.append(b)        
    
    m = int(input("Number of genes : "))
    o = int(input("Number of bits : "))
    listgene=[]
    for i  in range(0,m):
        a = ''.join(random.choice('10') for _ in range(o))
        print(a)
        listgene.append(a)
    
    
    print(listgene)
    
    
    #list of gene and his number result
    for i in range(0,len(listgene)):
        a = listgene[i]
        dictgene.append(a)
        b = int(listgene[i],2)
        dictgene.append(b)

    #function
    def r(mini,maxi,bina,binint):
        """calcul the X and the F(x) of the binary genetic code"""
        #X
        z = (((maxi-mini)/(2**len(str(bina))-1))*binint)+mini
        #F(x)
        y = (z**2)*math.sin(10*math.pi*z)+1 
        # y = (z+2*w-7)**2 + (2*z + w -5)**2 #(20)
        # y = # (z**2+w-11)**2 + (z + w**2 -7)**2 Himmelblau Function (65)
        # y = (abs(z)-5)**2 + (abs(z)-5)**2 #price 1 (94)
        z = round(z,3)
        y = round(y,3)
        
        return [z,y]
    
    #dictionary of result  
    dictf = {}
    for i in range(0,m*2,2):
        print("X : ",r(listvar[0],listvar[1],dictgene[i],dictgene[i+1])[0],"| F(X)",r(listvar[0],listvar[1],dictgene[i],dictgene[i+1])[1])
        dictf.update({r(listvar[0],listvar[1],dictgene[i],dictgene[i+1])[1]:dictgene[i]})
        print(i)
        
    print(dictf,'\n')
    #Sort the values
    kl=list(dictf.keys())
    new_kl = kl + []
    """max"""
    if maxmin == 'max':
        new_kl.sort()
        new_kl = new_kl[int(len(new_kl) * (1-Elitismo)):]
    #min
    else:
        new_kl.sort(reverse = True)
        new_kl = new_kl[int(len(new_kl) * (1-Elitismo)):]
        
    new_d = {}
    for k in new_kl:
        new_d[k] = dictf[k]
        
    #elitismo
    print('Elitism :',new_d,'\n')
    
    #initialization of cruzacion
    cruzacion1= 0
    cruzacion2 = 0 
    #be sure of selecting two different gene of the list
    while cruzacion1 == cruzacion2:
        cruzacion1 = random.choice(listgene)
        cruzacion2 = random.choice(listgene)
        print("First father gene : ",cruzacion1)
        print("Second father gene : ",cruzacion2,'\n')
    lenght = int(len(cruzacion1) * Cross)   
    cruzada1 = cruzacion1[0:lenght] + cruzacion2[lenght:len(cruzacion1)]
    cruzada2 = cruzacion2[0:lenght] + cruzacion1[lenght:len(cruzacion1)]
    print("First son crossed : ",cruzada1)
    print("Second son crossed : ",cruzada2,'\n')
    
    mutacion1 = random.choice(listgene)
    print("Gene 1 to mutate :", mutacion1)
    lenght = int(len(mutacion1)* (1-Mutacion1))
    mutacion = mutacion1[0:lenght]
    
    for n in range(len(mutacion) ,len(cruzada1)):
        if mutacion1[n] == '0':
            mutacion = mutacion + '1'
        else:
            mutacion = mutacion + '0'
    
    print("Gene 1 mutated : ",mutacion,'\n')
    
    mutacion2 = random.choice(listgene)
    print("Gene 2 to mutate :", mutacion2)
    lenght = int(len(mutacion2)* (1-Mutacion2))
    mutacion = mutacion2[0:lenght]
    
    for n in range(len(mutacion),len(cruzada1)):
        if mutacion2[n] == '0':
            mutacion = mutacion + '1'
        else:
            mutacion = mutacion + '0'
    
    print("Gene 2 mutated : ",mutacion)
    
    
#For 2 variable
elif n == 2:
    #input variable according to number of variable
    for i  in range(0,n):
        a = int(input("Minimum of your variable : "))
        listvar.append(a)
        b = int(input("Maximum of your variable : "))
        listvar.append(b) 
        
    #number of genes
    m = int(input("Number of genes : "))
    o = int(input("Number of bits : "))
    listgene=[]
    listbit=[]
    #Input the genetic code
    for i  in range(0,m):
        a = ''.join(random.choice('10') for _ in range(o))
        print(a)
        #split the gene by two for our 2 variable
        lenght = int(len(a)/n)
        b = a[0:lenght]
        listgene.append(b)
        c = a[lenght:]
        listgene.append(c)
    
    print(listgene)
    
    
    #create dictionary with gene and number related
    for i in range(0,len(listgene)):
        a = listgene[i]
        dictgene.append(a)
        b = int(listgene[i],2)
        dictgene.append(b)
        
        
    #function we want to calculate
    def r(mini,maxi,minw,maxw,bina,binint):
        """calcul the X,Y and the F(x) of the binary genetic code"""
        #X
        z = (((maxi-mini)/(2**len(str(bina))-1))*binint)+mini
        #Y
        w = (((maxw-minw)/(2**len(str(bina))-1))*binint)+minw
        #F(x,y)
        #y = 3*(z**3)-2*(z**2)-w
        y = (z+2*w-7)**2 + (2*z + w -5)**2 #(20)
        # y = # (z**2+w-11)**2 + (z + w**2 -7)**2 Himmelblau Function (65)
        # y = (abs(z)-5)**2 + (abs(z)-5)**2 #price 1 (94)
        z = round(z,3)
        w = round(w,3)
        y = round(y,3)
        #put the result in a list
        return [z,w,y]

    #dictionary of result  
    dictf = {}
    
    for i in range(0,m*4,4):
        print("X : ",r(listvar[0],listvar[1],listvar[2],listvar[3],dictgene[i],dictgene[i+1])[0],"Y : ",r(listvar[0],listvar[1],listvar[2],listvar[3],dictgene[i],dictgene[i+1])[1],"| F(X,Y)",r(listvar[0],listvar[1],listvar[2],listvar[3],dictgene[i],dictgene[i+1])[2],'\n')
        dictf.update({r(listvar[0],listvar[1],listvar[2],listvar[3],dictgene[i],dictgene[i+1])[2] : dictgene[i]})
    
    print(dictf)

    #Sort the values
    kl=list(dictf.keys())
    new_kl = kl + []
    """max"""
    if maxmin == 'max':
        new_kl.sort()
        new_kl = new_kl[int(len(new_kl) * (1-Elitismo)):]
    #min
    else:
        new_kl.sort(reverse = True)
        new_kl = new_kl[int(len(new_kl) * (1-Elitismo)):]
        
    new_d = {}
    for k in new_kl:
        new_d[k] = dictf[k]
        
    #elitismo
    print('Elitism :',new_d,'\n')
    
    #initialization of cruzacion
    cruzacion1= 0
    cruzacion2 = 0 
    #be sure of selecting two different gene of the list
    while cruzacion1 == cruzacion2:
        cruzacion1 = random.choice(listgene)
        cruzacion2 = random.choice(listgene)
        print("First father gene : ",cruzacion1)
        print("Second father gene : ",cruzacion2,'\n')
    lenght = int(len(cruzacion1) * Cross)   
    cruzada1 = cruzacion1[0:lenght] + cruzacion2[lenght:len(cruzacion1)]
    cruzada2 = cruzacion2[0:lenght] + cruzacion1[lenght:len(cruzacion1)]
    print("First son crossed : ",cruzada1)
    print("Second son crossed : ",cruzada2,'\n')
    
    mutacion1 = random.choice(listgene)
    print("Gene 1 to mutate :", mutacion1)
    lenght = int(len(mutacion1)* (1-Mutacion1))
    mutacion = mutacion1[0:lenght]
    
    for n in range(len(mutacion) ,len(cruzada1)):
        if mutacion1[n] == '0':
            mutacion = mutacion + '1'
        else:
            mutacion = mutacion + '0'
    
    print("Gene 1 mutated : ",mutacion,'\n')
    
    mutacion2 = random.choice(listgene)
    print("Gene 2 to mutate :", mutacion2)
    lenght = int(len(mutacion2)* (1-Mutacion2))
    mutacion = mutacion2[0:lenght]
    
    for n in range(len(mutacion),len(cruzada1)):
        if mutacion2[n] == '0':
            mutacion = mutacion + '1'
        else:
            mutacion = mutacion + '0'
    
    print("Gene 2 mutated : ",mutacion)
        
#For 3 variables
elif n == 3:
    #input variable according to number of variable
    for i  in range(0,n):
        a = int(input("Minimum of your variable : "))
        listvar.append(a)
        b = int(input("Maximum of your variable : "))
        listvar.append(b) 
        
    #number of genes
    m = int(input("Number of genes : "))
    o = int(input("Number of bits : "))
    listgene=[]
    listbit=[]
    #Input the genetic code
    for i  in range(0,m):
        a = ''.join(random.choice('10') for _ in range(o))
        print(a)
        #split the gene by two for our 2 variable
        lenght = int(len(a)/n)
        b = a[0:lenght]
        listgene.append(b)
        c = a[lenght:2*lenght]
        listgene.append(c)
        d = a[2*lenght:]
        listgene.append(d)
    print(listgene)
    
    
    #create dictionary with gene and number related
    for i in range(0,len(listgene)):
        a = listgene[i]
        dictgene.append(a)
        b = int(listgene[i],2)
        dictgene.append(b)
        
        
    #function we want to calculate
    def r(mini,maxi,minw,maxw,minz,maxz,bina,binint):
        """calcul the X,Y,Z and the F(x) of the binary genetic code"""
        #X
        z = (((maxi-mini)/(2**len(str(bina))-1))*binint)+mini
        #Y
        w = (((maxw-minw)/(2**len(str(bina))-1))*binint)+minw
        #Z
        l = (((maxz-minz)/(2**len(str(bina))-1))*binint)+minz
        #F(X,Y,Z)
        y = 3*(z**3)-2*(z**2)-w+l
        # y = (z+2*w-7)**2 + (2*z + w -5)**2 #(20)
        # y = # (z**2+w-11)**2 + (z + w**2 -7)**2 Himmelblau Function (65)
        # y = (abs(z)-5)**2 + (abs(z)-5)**2 #price 1 (94)
        z = round(z,3)
        w = round(w,3)
        l = round(l,3)
        y = round(y,3)
        #put the result in a list
        return [z,w,l,y]

    #dictionary of result  
    dictf = {}
    
    for i in range(0,m*4,6):
        print("X : ",r(listvar[0],listvar[1],listvar[2],listvar[3],listvar[4],listvar[5],dictgene[i],dictgene[i+1])[0],"Y : ",r(listvar[0],listvar[1],listvar[2],listvar[3],listvar[4],listvar[5],dictgene[i],dictgene[i+1])[1],"Z : ",r(listvar[0],listvar[1],listvar[2],listvar[3],listvar[4],listvar[5],dictgene[i],dictgene[i+1])[2],"| F(X,Y)",r(listvar[0],listvar[1],listvar[2],listvar[3],listvar[4],listvar[5],dictgene[i],dictgene[i+1])[3],'\n')
        dictf.update({r(listvar[0],listvar[1],listvar[2],listvar[3],listvar[4],listvar[5],dictgene[i],dictgene[i+1])[3] : dictgene[i]})
    
    print(dictf)

    #Sort the values
    kl=list(dictf.keys())
    new_kl = kl + []
    """max"""
    if maxmin == 'max':
        new_kl.sort()
        new_kl = new_kl[int(len(new_kl) * (1-Elitismo)):]
    #min
    else:
        new_kl.sort(reverse = True)
        new_kl = new_kl[int(len(new_kl) * (1-Elitismo)):]
        
    new_d = {}
    for k in new_kl:
        new_d[k] = dictf[k]
        
    #elitismo
    print('Elitism :',new_d,'\n')
    
    #initialization of cruzacion
    cruzacion1= 0
    cruzacion2 = 0 
    #be sure of selecting two different gene of the list
    while cruzacion1 == cruzacion2:
        cruzacion1 = random.choice(listgene)
        cruzacion2 = random.choice(listgene)
        print("First father gene : ",cruzacion1)
        print("Second father gene : ",cruzacion2,'\n')
    lenght = int(len(cruzacion1) * Cross)   
    cruzada1 = cruzacion1[0:lenght] + cruzacion2[lenght:len(cruzacion1)]
    cruzada2 = cruzacion2[0:lenght] + cruzacion1[lenght:len(cruzacion1)]
    print("First son crossed : ",cruzada1)
    print("Second son crossed : ",cruzada2,'\n')
    
    mutacion1 = random.choice(listgene)
    print("Gene 1 to mutate :", mutacion1)
    lenght = int(len(mutacion1)* (1-Mutacion1))
    mutacion = mutacion1[0:lenght]
    
    for n in range(len(mutacion) ,len(cruzada1)):
        if mutacion1[n] == '0':
            mutacion = mutacion + '1'
        else:
            mutacion = mutacion + '0'
    
    print("Gene 1 mutated : ",mutacion,'\n')
    
    mutacion2 = random.choice(listgene)
    print("Gene 2 to mutate :", mutacion2)
    lenght = int(len(mutacion2)* (1-Mutacion2))
    mutacion = mutacion2[0:lenght]
    
    for n in range(len(mutacion),len(cruzada1)):
        if mutacion2[n] == '0':
            mutacion = mutacion + '1'
        else:
            mutacion = mutacion + '0'
    
    print("Gene 2 mutated : ",mutacion)
    

#For 4 variables
elif n == 4:
    #input variable according to number of variable
    for i  in range(0,n):
        a = int(input("Minimum of your variable : "))
        listvar.append(a)
        b = int(input("Maximum of your variable : "))
        listvar.append(b) 
        
    #number of genes
    m = int(input("Number of genes : "))
    o = int(input("Number of bits : "))
    listgene=[]
    listbit=[]
    #Input the genetic code
    for i  in range(0,m):
        a = ''.join(random.choice('10') for _ in range(o))
        print(a)
        #split the gene by two for our 2 variable
        lenght = int(len(a)/n)
        b = a[0:lenght]
        listgene.append(b)
        c = a[lenght:2*lenght]
        listgene.append(c)
        d = a[2*lenght:3*lenght]
        listgene.append(d)
        e = a[3*lenght:]
        listgene.append(e)
    print(listgene)
    
    
    #create dictionary with gene and number related
    for i in range(0,len(listgene)):
        a = listgene[i]
        dictgene.append(a)
        b = int(listgene[i],2)
        dictgene.append(b)
        
        
    print(dictgene)
    #function we want to calculate
    def r(mini,maxi,minw,maxw,minz,maxz,mint,maxt,bina,binint):
        """calcul the X,Y,Z,T and the F(x) of the binary genetic code"""
        #X
        z = (((maxi-mini)/(2**len(str(bina))-1))*binint)+mini
        #Y
        w = (((maxw-minw)/(2**len(str(bina))-1))*binint)+minw
        #Z
        l = (((maxz-minz)/(2**len(str(bina))-1))*binint)+minz
        #T
        t = (((maxt-mint)/(2**len(str(bina))-1))*binint)+mint
        #F(X,Y,Z,T)
        y = 3*(z**3)-2*(z**2)-w+l*t
        # y = (z+2*w-7)**2 + (2*z + w -5)**2 #(20)
        # y = # (z**2+w-11)**2 + (z + w**2 -7)**2 Himmelblau Function (65)
        # y = (abs(z)-5)**2 + (abs(z)-5)**2 #price 1 (94)
        z = round(z,3)
        w = round(w,3)
        l = round(l,3)
        t = round(t,3)
        y = round(y,3)
        #put the result in a list
        return [z,w,l,t,y]
    
    #dictionary of result  
    dictf = {}
    
    for i in range(0,m*4,8):
        print("X : ",r(listvar[0],listvar[1],listvar[2],listvar[3],listvar[4],listvar[5],listvar[6],listvar[7],dictgene[i],dictgene[i+1])[0],"Y : ",r(listvar[0],listvar[1],listvar[2],listvar[3],listvar[4],listvar[5],listvar[6],listvar[7],dictgene[i],dictgene[i+1])[1],"Z : ",r(listvar[0],listvar[1],listvar[2],listvar[3],listvar[4],listvar[5],listvar[6],listvar[7],dictgene[i],dictgene[i+1])[2],"T : ",r(listvar[0],listvar[1],listvar[2],listvar[3],listvar[4],listvar[5],listvar[6],listvar[7],dictgene[i],dictgene[i+1])[3],"| F(X,Y)",r(listvar[0],listvar[1],listvar[2],listvar[3],listvar[4],listvar[5],listvar[6],listvar[7],dictgene[i],dictgene[i+1])[4],'\n')
        dictf.update({r(listvar[0],listvar[1],listvar[2],listvar[3],listvar[4],listvar[5],listvar[6],listvar[7],dictgene[i],dictgene[i+1])[4] : dictgene[i]})
    
    print(dictf)
    
    #Sort the values
    kl=list(dictf.keys())
    new_kl = kl + []
    """max"""
    if maxmin == 'max':
        new_kl.sort()
        new_kl = new_kl[int(len(new_kl) * (1-Elitismo)):]
    #min
    else:
        new_kl.sort(reverse = True)
        new_kl = new_kl[int(len(new_kl) * (1-Elitismo)):]
        
    new_d = {}
    for k in new_kl:
        new_d[k] = dictf[k]
        
    #elitismo
    print('Elitism :',new_d,'\n')
    
    #initialization of cruzacion
    cruzacion1= 0
    cruzacion2 = 0 
    #be sure of selecting two different gene of the list
    while cruzacion1 == cruzacion2:
        cruzacion1 = random.choice(listgene)
        cruzacion2 = random.choice(listgene)
        print("First father gene : ",cruzacion1)
        print("Second father gene : ",cruzacion2,'\n')
    lenght = int(len(cruzacion1) * Cross)   
    cruzada1 = cruzacion1[0:lenght] + cruzacion2[lenght:len(cruzacion1)]
    cruzada2 = cruzacion2[0:lenght] + cruzacion1[lenght:len(cruzacion1)]
    print("First son crossed : ",cruzada1)
    print("Second son crossed : ",cruzada2,'\n')
    
    mutacion1 = random.choice(listgene)
    print("Gene 1 to mutate :", mutacion1)
    lenght = int(len(mutacion1)* (1-Mutacion1))
    mutacion = mutacion1[0:lenght]
    
    for n in range(len(mutacion) ,len(cruzada1)):
        if mutacion1[n] == '0':
            mutacion = mutacion + '1'
        else:
            mutacion = mutacion + '0'
    
    print("Gene 1 mutated : ",mutacion,'\n')
    
    mutacion2 = random.choice(listgene)
    print("Gene 2 to mutate :", mutacion2)
    lenght = int(len(mutacion2)* (1-Mutacion2))
    mutacion = mutacion2[0:lenght]
    
    for n in range(len(mutacion),len(cruzada1)):
        if mutacion2[n] == '0':
            mutacion = mutacion + '1'
        else:
            mutacion = mutacion + '0'
    
    print("Gene 2 mutated : ",mutacion)
    
else:
    print("choose another number of variable")



