# Import necessary modules
from keras.layers import Dense,Input,Concatenate,Add
from keras.callbacks import EarlyStopping
from keras.models import Model
import pymysql
import pandas as pd
import matplotlib.pyplot as plt
from keras.utils import plot_model
from keras.utils import to_categorical

# Connect to the database
connection = pymysql.connect(
host='localhost',
user='root',
passwd='gniay.ing2020',
db='mlb',
charset='utf8mb4'
)
cursor = connection.cursor()
data = "SELECT * FROM historic_2018"
cursor.execute(data)
data = pd.read_sql(data,con=connection)
data= data.drop(columns=['id','date'])
data = pd.DataFrame(data)


#integers
inte = pd.DataFrame(data, columns =['Score Home','Score Away'])
print(inte)
# dummies
dummies = pd.get_dummies(data, columns=['Winner','Home','Away'])
print(dummies)
data = inte.merge(dummies, how='outer')
#only take values
dataset = data.values
print(data.shape)
#Home team
Xhome = dataset[:,32:62]
#Away team
Xaway = dataset[:,62:92]
#Winner
Ywin = dataset[:,2:32]
#score Hometeam
Yscorehome = dataset[:,1:2]
#Score Away team
Yscoreaway = dataset[:,0:1]


#Calcul RNA Win Model
home = Input(shape=(30,))
away = Input(shape=(30,))
calculscorehome = Add()([home,away])
calculscoreaway =  Add()([home,away])
addwin = Add()([calculscorehome,calculscoreaway])
outwin = Dense(30,activation ='softmax')(addwin)
inputs=[home, away]
outputs=[outwin]
model = Model(inputs,outputs)

# Plot model graph
plot_model(model, show_shapes=True, show_layer_names=True, to_file='modelwin.png')
# Display the image
data = plt.imread('modelwin.png')
plt.imshow(data)
plt.show()
# Compile model
callbacks = [EarlyStopping(monitor='val_loss', patience=10)]

model.compile(loss='categorical_crossentropy',optimizer='adam', metrics=['accuracy'])

history = model.fit([Xhome,Xaway],[Ywin],           
          epochs=30,
          verbose=True,
          validation_split=0.4,
          batch_size=1,
          callbacks= callbacks)

scores = model.evaluate([Xhome,Xaway],[Ywin])

# summarize history for accuracy
plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

print("%s: %.2f%%" % (model.metrics_names[1], scores[1] * 100))
"""Xhome = cursor.execute("Select Home from predict ")
Xaway = cursor.execute("Select Away from predict ")
predict = model.predict_on_batch([Xhome,Xaway])
# Save prediction_df to csv
predict = pd.DataFrame(predict).to_csv('predict sqlWin.csv')
"""

"""
# Print the converted dtypes
cat_columns = data.select_dtypes(['category']).columns
data[cat_columns] = data[cat_columns].apply(lambda x: x.cat.codes)
print(data[cat_columns])


X = dataset[:,32:92]
Y = dataset[:,0:32]
n_cols = X.shape[1]

model = Sequential()
model.add(Dense(128,activation='relu',input_shape=(n_cols,)))
model.add(Dense(256, activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(64, activation='relu'))
model.add(Dense(32, activation='sigmoid'))"""



